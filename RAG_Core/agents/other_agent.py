from typing import Dict, Any, List
from models.llm_model import llm_model
from config.settings import settings


class OtherAgent:
    def __init__(self):
        self.name = "OTHER"
        self.prompt_template = """B·∫°n l√† m·ªôt chuy√™n vi√™n t∆∞ v·∫•n kh√°ch h√†ng ng∆∞·ªùi Vi·ªát Nam th√¢n thi·ªán v√† chuy√™n nghi·ªáp. - x·ª≠ l√Ω c√°c y√™u c·∫ßu ngo√†i ph·∫°m vi h·ªó tr·ª£.

Nhi·ªám v·ª•: Th√¥ng b√°o l·ªãch s·ª± khi y√™u c·∫ßu n·∫±m ngo√†i ph·∫°m vi v√† h∆∞·ªõng d·∫´n kh√°ch h√†ng.

Y√™u c·∫ßu c·ªßa kh√°ch h√†ng: "{question}"
S·ªë ƒëi·ªán tho·∫°i h·ªó tr·ª£: {support_phone}

H∆∞·ªõng d·∫´n:
1. Gi·∫£i th√≠ch r·∫±ng y√™u c·∫ßu n·∫±m ngo√†i ph·∫°m vi h·ªó tr·ª£ hi·ªán t·∫°i
2. ƒê·ªÅ xu·∫•t li√™n h·ªá hotline ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n c·ª• th·ªÉ h∆°n
3. Gi·ªØ th√°i ƒë·ªô l·ªãch s·ª± v√† chuy√™n nghi·ªáp
4. Kh√¥ng t·ª´ ch·ªëi m·ªôt c√°ch th√¥ l·ªó

Tr·∫£ l·ªùi:"""

    def process(self, question: str, **kwargs) -> Dict[str, Any]:
        """X·ª≠ l√Ω y√™u c·∫ßu ngo√†i ph·∫°m vi h·ªó tr·ª£"""
        try:
            prompt = self.prompt_template.format(
                question=question,
                support_phone=settings.SUPPORT_PHONE
            )

            answer = llm_model.invoke(prompt)

            # Fallback answer
            if not answer or len(answer.strip()) < 10:
                answer = f"""C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá!

Y√™u c·∫ßu c·ªßa b·∫°n c√≥ v·∫ª n·∫±m ngo√†i ph·∫°m vi h·ªó tr·ª£ hi·ªán t·∫°i c·ªßa t√¥i. ƒê√¢y kh√¥ng ph·∫£i l√† t√°c v·ª• m√† t√¥i c√≥ th·ªÉ x·ª≠ l√Ω.

ƒê·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n v√† h·ªó tr·ª£ t·ªët nh·∫•t cho y√™u c·∫ßu c·ª• th·ªÉ n√†y, b·∫°n vui l√≤ng:
üìû Li√™n h·ªá hotline: {settings.SUPPORT_PHONE}
‚è∞ Th·ªùi gian: 24/7

ƒê·ªôi ng≈© chuy√™n vi√™n s·∫Ω h·ªó tr·ª£ b·∫°n m·ªôt c√°ch chuy√™n nghi·ªáp nh·∫•t!"""

            return {
                "status": "SUCCESS",
                "answer": answer,
                "references": [],
                "next_agent": "end"
            }

        except Exception as e:
            return {
                "status": "ERROR",
                "answer": f"ƒê√¢y kh√¥ng ph·∫£i l√† t√°c v·ª• c·ªßa t√¥i. Vui l√≤ng li√™n h·ªá {settings.SUPPORT_PHONE} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.",
                "references": [],
                "next_agent": "end"
            }